<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
	En este fichero vamos a crear todos los objetos
	que queramos que sean gestionados por el contexto de
	Spring, es decir aplicar la inversion de control o 
	tambien llamada IoC
	
	Un objeto spring (bean) se crea con la etiqueta "bean" y al 
	menos hay que darle 2 atributos, el id, que debe de ser
	unico y la clase de la cual hay que crear el objeto 
	
	El ciclo de vida de este objeto va a ser gestionado por
	spring y por defecto el ciclo de vida sera "singleton"
	que es que el objeto existira siempre en la aplicacion,
	es decir sera unico
	
	Ahora yo como programador no tengo porque preocuparme
	de estar referenciado siempre este objeto
	
	Ademas el objeto deja de ser anomimo, y su identificador
	es el id
	-->
	<bean id="persona1" class="entidad.Persona"></bean>
	
	<!-- 
	Dentro del contexto podemos crear todos los objetos que queramos
	y podemos alterar sus propiedades(atributos) en este fichero
	xml. Esto podremos hacerlo siempre y cuando tenga estructura
	JavaBean
	 -->
	 
	 <bean id="persona2" class="entidad.Persona">
	 	<property name="nombre" value="Ernion GÃ¼esley"></property>
	 	<property name="edad" value="22"></property>
	 	<property name="peso" value="55.3"></property>
	 </bean>
	 
	 <bean id="direccion1" class="entidad.Direccion">
	 	<property name="tipoVia" value="Calle"></property>
	 	<property name="nombreVia" value="Gran Via"></property>
	 	<property name="ciudad" value="Madrid"></property>
	 </bean>
	 
	 <bean id="persona3" class="entidad.Persona">
	 	<property name="nombre" value="Gandalf El Gris"></property>
	 	<property name="edad" value="42"></property>
	 	<property name="peso" value="80"></property>
	 	<property name="direccion" ref="direccion1"></property>
	 </bean>
	 
	 <!-- Es posible que necesitemos crear objetos en tiempo de ejecucion, no 
	 que los objetos vengan creados. Para ello podemos usar el alcance o "scope"
	 "prototype", este alcance a diferencia de Singleton, cada vez que llamemos
	 al identificador de este objeto, nos va a crear uno nuevo, a imagen y semejanza -->
	 
	<bean id="personaPrototipada" class="entidad.Persona" scope="prototype">
		<property name="nombre" value="Ironman"></property>
		<property name="edad" value="40"></property>
		<property name="peso" value="250"></property>
	</bean>	 
	
	<bean id="listaPersonas" class="java.util.LinkedList" scope="singleton"></bean>
	
	<!-- A parte de inyectar objetos mediante propiedad y el atributo "ref" podemos
	hacerlo mediante "innerbean", es decir, dar de alta los dos objetos a la vez -->
	
	<bean id="persona4" class="entidad.Persona">
		<property name="nombre" value="Homer"></property>
		<property name="edad" value="37"></property>
		<property name="peso" value="120"></property>
		<property name="direccion">
			<bean class="entidad.Direccion">
				<property name="tipoVia" value="street"></property>
				<property name="nombreVia" value="evergreen terras 742"></property>
				<property name="ciudad" value="Springfield"></property>
			</bean>
		</property>
	</bean>
	
	<!-- Podemos crear un array predefinido con objetos -->
	<bean id="listaPersonas2" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<ref bean="persona4"/>
				<ref bean="persona3"/>
			</list>
		</constructor-arg>
	</bean>
</beans>





